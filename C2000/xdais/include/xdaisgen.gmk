#
#  ======== xdaisgen.gmk ========
#
#
#
#  This file contains initializes variables for use when compiling and linking
#  XDAS programs for any TI DSP; i.e., it is used for both C6x and C54x builds.
#
#
#  Note:  This file is not intended to be used by itself; it is included as 
#	  necessary by "higher-level" makefiles, such as xdais62.gmk and
#	  xdais54.gmk.  This makefile encapsulates the common definitions 
#	  required for all TI architectures.
#

#SHELL = command.com

#
#  Convert all '\'s to '/'s in user environment variables.  This is 
#  required to insure that DOS '\'s are not interpreted as a quote 
#  character when gmake invokes commands.
#
TI_DIR  := $(subst \,/,$(TI_DIR))
XDASDIR := $(subst \,/,$(XDASDIR))

#
#  The variable CHIP is typically set to 54 or 62. If it is set to 54f
#  for the far call model of the 54, then the configuration files aren't
#  handled properly. The configuration files should be .s54 and .h54
#  regardless of call model.
#
ifeq ($(CHIP),55l)
    HCHIP := 55
    SCHIP := 55
else
    ifeq ($(CHIP),54f)
        HCHIP := 54
        SCHIP := 54
    else
        ifeq ($(CHIP),28l)
        HCHIP := 28
        SCHIP := 28
	else
	    HCHIP := $(CHIP)
	    SCHIP := $(CHIP)
	endif
    endif
endif

ifneq (,$(findstring 6,$(CHIP)))
    SCHIP := 62
endif

#
#  Define other directory locations necessary for building programs:
#
#	WINDIR  - the windows system directory
#

ifndef WINDIR
    ifdef windir
	WINDIR := $(windir)
    else
	ifdef SYSROOT
	    WINDIR := $(SYSROOT)
	else
	    WINDIR := c:/windows
	endif
    endif
endif

#
#  MAKEFLAGS is a special variable that can be used to set command 
#  line options from within the makefile.
#
#  '-r' causes gnumake to remove *all* built-in rules; this has the effect 
#  of improving the performance of gnumake (it has fewer rules to parse and 
#  fewer targets/dependencies to look for) at the expense of having to 
#  redefine common rules.
#
MAKEFLAGS = -r

ifndef DEBUG
    DEBUG = 0
endif
ifeq ($(DEBUG),1)
    #
    #  '-g' provides extra symbol information for the TI debugger and is
    #  necessary for C source-level debugging.  '-g' generates slower code
    #  since some optimization phases are necessarily disabled.
    #
    #  '-al' causes the assembler to generate an assembly language
    #  "listing" file.  This is sometimes helpful in identifying the
    #  precise location and cause of errors.
    #
    #  '-m' causes the linker to produce a map file for the executable.
    #
    CCDEFS += -DDEBUG=1
    CCOPTS += -g
    ASMDEFS += -DDEBUG=1
    ASMOPTS += -g -al
    LINKOPTS += -x -c -m $*.map$(CHIP)
else
    #
    #  Set optimization level as high as possible:
    #      '-o3' - maximum optimization level (register, local, global and
    #	       interproc)
    #      '-x2' - perform inline function expansion
    #
    CCOPTS += -o3 
    LINKOPTS += -x
endif

#
#  ======== Utility commands ========
#  The following macros define commands used in makefiles.  We define these
#  here so that there are no PATH dependencies in any other makefiles.
#
CP := $(TI_DIR)/bin/copyfile
RM := $(TI_DIR)/bin/remove

#
#  ======== Export Directories ========
#  Targets generated by makefiles are placed in the following directories:
#	$L	- libraries 
#	$B	- executables (binaries)
#	$I	- include files 
#
L = ../../lib
B = ../../bin
I = ../../include

#
#  ======== Include Path Settings ========
#  The following definitions are used to define the search paths used
#  by the compiler and linker to locate include files and libraries.
#
#   INCPATH - the path used to locate header files when building from
#	       either C or assembly language sources.
#
#   LIBPATH - the path used by the linker to locate libraries named in
#	      linker command files or on the linker command line itself.
#
INCPATH	    = .;$(XDASDIR)/include;$(XDASDIR)/src/api;$(XDASDIR)/src/filter;$(XDASDIR)/src/copy;$(TOOLSDIR)/include;$(TOOLSDIR);.;../
LIBPATH     = .;$(XDASDIR)/lib;$(TOOLSDIR)/lib;$(TOOLSDIR)

#
#  Suffixes understood by this makefile:
#	.l$(CHIP)   - archive (i.e., library) of DSP objects
#	.x$(CHIP)   - DSP executable
#	.out	    - same as .x$(CHIP)
#	.o$(CHIP)   - DSP object file
#	.s$(SCHIP)  - DSP assembly language source file
#	.h$(HCHIP)  - DSP assembly language header file
#	.c	    - C language source file
#	.cmd	    - linker command file
#	.cdb	    - program configuration database file
#	.map	    - linker memory map file
#
.SUFFIXES:
.SUFFIXES: .lst .map .out .x$(CHIP) .l$CHIP) .o$(CHIP) .s$(SCHIP) .h$(HCHIP) .c .cmd .cdb

#
#  Environment variables for all commands (incuding sub-makes)
#
#	C_DIR - this environment variable is used to define the library 
#		search path used by the TI linker.
#
#	A_DIR - this environment variable is used to define the library 
#		search path used by the TI linker.
#
#	PATH -  this environment variable is used by the compiler to find 
#		the various executables used to perform code gen.
#
#       Path -  Same as above.  We define this for WinNT's cmd.exe shell
#
#	dos4g - this environment variable is used by the DOS4G DOS extender; 
#		this definition will prevent the extender from displaying
#		version infomation on every use.
#
ifeq (,$(findstring $(XDASDIR)/lib,$(C_DIR)))
    C_DIR := $(LIBPATH);$(INCPATH);$(C_DIR)
endif
export C_DIR

ifeq (,$(findstring $(XDASDIR)/lib,$(A_DIR)))
    A_DIR := $(LIBPATH);$(INCPATH);$(A_DIR)
endif
export A_DIR

ifeq (,$(findstring \,$(PATH)))
    # Add compiler directory to UNIX-style PATH variable
    ifeq (,$(findstring $(dir $(CC)),$(PATH)))
        PATH := $(dir $(CC)):$(PATH)
    endif
else
    # Add compiler directory to Windows-style PATH variable
    ifeq (,$(findstring $(subst /,\,$(dir $(CC))),$(PATH)))
        PATH := $(subst /,\,$(dir $(CC)));$(PATH)
    endif
    # Add DSP/BIOS DLL directory to Windows-style PATH variable
    ifeq (,$(findstring $(subst /,\,$(WINDIR)/ti/plugins/bios),$(PATH)))
        PATH := $(subst /,\,$(WINDIR)/ti/plugins/bios);$(PATH)
    endif
endif
export PATH
Path := $(PATH)
export Path

#export dos4g := quiet

#
#  ======== vpath settings ========
#  Set a dependency search path for the board library; first look in the 
#  "mysrc" lib sub-directory then look in the xdais installation lib 
#  sub-directory.  It might be good to search for *all* libraries in the 
#  same way; this can be achieved by replacing "$(XDASBOARD)" with the 
#  single character '%'.
#
vpath $(XDASBOARD).l$(CHIP) $L;$(XDASDIR)/lib

#
#  ======== Pattern Rules ========
#  Note that the order of the rules may be important:  GNU make will 
#  use the first rule that applies; e.g., if an object file can be 
#  generated from either a .c or a .s file *and* both the .c and the
#  .s file  exist, then GNU will choose the method defined by the
#  first rule.
#

OBJPAT = %.o %.o$(CHIP) %.obj
LIBPAT = %.l$(CHIP) %.lib
CMDPAT =  %.cmd %.cmd$(CHIP)

%.s$(SCHIP) : %.c
	$(CC) -S $(CCPERMOPTS) $(CCOPTS) $(CCINCS) $(CCDEFS) $*.c

%.o$(CHIP) : %.s$(SCHIP)
	$(ASM) -c $(ASMPERMOPTS) $(ASMOPTS) $(ASMINCS) $(ASMDEFS) $*.s$(SCHIP)

%.o$(CHIP) : %.c
	$(CC) -c $(CCPERMOPTS) $(CCOPTS) $(CCINCS) $(CCDEFS) $*.c

%cfg.s$(SCHIP) %cfg.cmd %cfg.h$(HCHIP) %cfg_c.c :: %.cdb
	$(TI_DIR)/plugins/bios/gconfgen $*.cdb

# ifeq ($(CHIP),54f)
#	$(CP) $*cfg.s54 $*cfg.s54f
#	$(RM) $*cfg.s54
# endif


.PRECIOUS: %cfg.s$(SCHIP) %cfg.cmd %cfg.h$(HCHIP)

%.x$(CHIP): %.o$(CHIP) %cfg.o$(CHIP) %.cmd
	$(LINK) $(LINKOPTS) -o $*.x$(CHIP) $(filter $(OBJPAT),$^) $(filter $(LIBPAT),$^) $(filter $(CMDPAT),$^)

%.x$(CHIP): %.o$(CHIP) %cfg.cmd %cfg.o$(CHIP)
	$(LINK) $(LINKOPTS) -o $*.x$(CHIP) $(filter $(OBJPAT),$^) $(filter $(LIBPAT),$^) $(filter $(CMDPAT),$^)

%.x$(CHIP): %.o$(CHIP)
	$(LINK) $(LINKOPTS) -o $*.x$(CHIP) $(filter $(OBJPAT),$^) $(filter $(LIBPAT),$^) $(filter $(CMDPAT),$^)

%.out: %.o$(CHIP) %cfg.o$(CHIP) %.cmd
	$(LINK) $(LINKOPTS) -o $*.out $(filter $(OBJPAT),$^) $(filter $(LIBPAT),$^) $(filter $(CMDPAT),$^)

%.out: %.o$(CHIP) %cfg.cmd %cfg.o$(CHIP) %cfg_c.o$(CHIP)
	$(LINK) $(LINKOPTS) -o $*.out $(filter $(OBJPAT),$^) $(filter $(LIBPAT),$^) $(filter $(CMDPAT),$^)

%.out: %.o$(CHIP)
	$(LINK) $(LINKOPTS) -o $*.out $(filter $(OBJPAT),$^) $(filter $(LIBPAT),$^) $(filter $(CMDPAT),$^)

%.map: %.o$(CHIP) %cfg.cmd %cfg.o$(CHIP)
	$(LINK) -m $@ $(LINKOPTS) $(filter $(OBJPAT),$^) $(filter $(LIBPAT),$^) $(filter $(CMDPAT),$^)

%.map: %.o$(CHIP)
	$(LINK) -m $@ $(LINKOPTS) $(filter $(OBJPAT),$^) $(filter $(LIBPAT),$^) $(filter $(CMDPAT),$^)

#
# ======== Generic Targets ========
#
#    all-files - this target is defined here to insure that it is the 
#		 first target found in a makfile that incude this file; 
#		 otherwise the clean target will be seen and gnumake will
#		 make "clean" by default.
#
#    clean     - this target is defined so it does not need to be repeated in 
#		 every other makefile.  Since it is a '::' target, individual 
#		 makefiles can extend this target as necessary by simply
#		 defining a "clean::" target with more commands.
#
all-files: all ;

clean::
	@$(RM) *.l$(CHIP) 
	@$(RM) *.x$(CHIP)
	@$(RM) *.o$(CHIP)
	@$(RM) *.out
	@$(RM) *.map
	@$(RM) *.lst
	
